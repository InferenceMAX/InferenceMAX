name: Template - Benchmark
on:
  workflow_call:
    inputs:
      exp-name:
        required: true
        type: string
      isl:
        required: true
        type: string
      osl:
        required: true
        type: string
      max-model-len:
        required: true
        type: string
      random-range-ratio:
        required: true
        type: string
      runner:
        required: true
        type: string
      image:
        required: true
        type: string
      model:
        required: true
        type: string
      tp-list:
        required: true
        type: string
      timeout:
        required: true
        type: number
      framework:
        required: true
        type: string
      precision:
        type: string
        default: fp8

env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  HF_HUB_CACHE: '/mnt/hf_hub_cache/'
  EXP_NAME: ${{ inputs.exp-name }}
  MODEL: ${{ inputs.model }}
  ISL: ${{ inputs.isl }}
  OSL: ${{ inputs.osl }}
  MAX_MODEL_LEN: ${{ inputs.max-model-len }}
  RANDOM_RANGE_RATIO: ${{ inputs.random-range-ratio }}
  IMAGE: ${{ inputs.image }}
  FRAMEWORK: ${{ inputs.framework }}
  PRECISION: ${{ inputs.precision }}

jobs:
  benchmark:
    runs-on: ${{ inputs.runner }}

    timeout-minutes: ${{ inputs.timeout }}
    strategy:
      fail-fast: false
      matrix:
        tp: ${{ fromJson(inputs.tp-list) }}
        conc: [4, 8, 16, 32, 64]
    name: '${{ inputs.runner }} (tp${{ matrix.tp }} , conc${{ matrix.conc }})'

    env:
      TP: ${{ matrix.tp }}
      CONC: ${{ matrix.conc }}

    steps:
      - name: Resource cleanup
        run: |
          if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
            echo "Cleaning Docker resource ..."
            docker ps -aq | xargs -r docker rm -f
            docker network prune -f
            while [ -n "$(docker ps -aq)" ]; do
              sleep 5
            done
          fi
          if command -v squeue >/dev/null 2>&1; then
            echo "Cleaning Slurm resource ..."
            scancel -u $USER
            while [ -n "$(squeue -u $USER --noheader --format='%i')" ]; do
              squeue -u $USER
              sleep 5
            done
          fi

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_PAT }}
          fetch-depth: 0

      - name: Set result filename
        run: |
          RESULT_FILENAME=${{ env.EXP_NAME }}_${{ env.FRAMEWORK }}_${{ env.PRECISION }}_tp${{ env.TP }}_conc${{ env.CONC }}_${{ runner.name }}
          echo "RESULT_FILENAME=${RESULT_FILENAME}" >> $GITHUB_ENV

      - name: Launch job script
        run: |
          RUNNER_NAME=${{ runner.name }}
          bash ./runners/launch_${RUNNER_NAME%%_*}*.sh ${{ inputs.exp-name }}

      - name: Process result
        run: python3 utils/process_result.py ${{ inputs.runner }} ${{ env.TP }} ${{ env.RESULT_FILENAME }} ${{ env.FRAMEWORK }} ${{ env.PRECISION }}

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RESULT_FILENAME }}
          path: agg_${{ env.RESULT_FILENAME }}.json
