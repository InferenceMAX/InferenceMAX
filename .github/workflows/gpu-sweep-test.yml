name: Test - GPU Sweep

run-name: ${{ github.event.inputs.runner }} Sweep

on:
  workflow_dispatch:
    inputs:
      runner:
        description: 'Runner'
        required: true
        type: choice
        options:
          - 'h100'
          - 'h200'
          - 'b200'
          - 'h200-trt'
          - 'b200-trt'
          - 'mi300x'
          - 'mi325x'
          - 'mi355x'

      image-70b:
        description: '70B Docker Image'
        required: true
        type: choice
        options:
          - 'kedarpotdar147/vllm0.1:latest'
          - 'kedarpotdar147/vllm:05'
          - 'rocm/7.0-preview:rocm7.0_preview_ubuntu_22.04_vllm_0.10.1_instinct_rc1'
          - 'rocm/7.0-preview:rocm7.0_preview_ubuntu_22.04_vllm_0.9.1_mi35x_alpha'
          - 'nvcr.io#nvidia/tensorrt-llm/release:1.1.0rc2'

      image-dsr1:
        description: 'DSR1 Docker Image'
        required: true
        type: choice
        options:
          - 'lmsysorg/sglang:v0.4.9.post1-cu126'
          - 'lmsysorg/sglang:v0.5.0rc1-cu128-b200'
          - 'rocm/7.0-preview:rocm7.0_preview_ubuntu_22.04_sgl-dev-v0.5.2rc2-mi30x_rc1'
          - 'lmsysorg/sglang:v0.4.9.post2-rocm630-mi30x'
          - 'lmsysorg/sglang:v0.5.1.post2-rocm700-mi35x'
          - 'nvcr.io#nvidia/tensorrt-llm/release:1.1.0rc2'

      image-gptoss:
        description: 'gpt-oss Docker Image'
        required: true
        type: choice
        options:
          - 'rocm/vllm-dev:open-mi300-08052025'
          - 'rocm/vllm-dev:open-mi355-08052025'

env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  HF_HUB_CACHE: '/mnt/hf_hub_cache/'
  ISL: 1024
  OSL: 1024
  MAX_MODEL_LEN: 2048
  RANDOM_RANGE_RATIO: 0.8
  TP: 8

jobs:
  bmk-sweep-test-70b:
    runs-on: ${{ inputs.runner }}

    strategy:
      fail-fast: false
      matrix:
        conc: [4, 8, 16, 32, 64]
    name: '70b ${{ inputs.runner }} (tp8 , conc${{ matrix.conc }})'

    env:
      EXP_NAME: '70b_test'
      IMAGE: ${{ inputs.image-70b }}
      CONC: ${{ matrix.conc }}

    steps:
      - name: Resource cleanup
        run: |
          if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
            echo "[Docker] Cleaning up resources ..."
            docker ps -aq | xargs -r docker rm -f
            docker network prune -f
            while [ -n "$(docker ps -aq)" ]; do
              sleep 5
            done
          fi
          if command -v squeue >/dev/null 2>&1; then
            echo "[Slurm] Cleaning up resources ..."
            scancel -u $USER
            while [ -n "$(squeue -u $USER --noheader --format='%i')" ]; do
              squeue -u $USER
              sleep 5
            done
          fi

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_PAT }}
          fetch-depth: 0

      - name: Set config variables
        run: |
          FRAMEWORK=$([[ ${{ inputs.runner }} == *trt ]] && printf "trt" || printf "")
          echo "FRAMEWORK=${FRAMEWORK}" >> $GITHUB_ENV

          NV_MODEL="nvidia/Llama-3.3-70B-Instruct-FP8"
          AMD_MODEL="amd/Llama-3.3-70B-Instruct-FP8-KV"
          MODEL=$([[ ${{ inputs.runner}} == mi* ]] && printf $AMD_MODEL || printf $NV_MODEL)
          echo "MODEL=${MODEL}" >> $GITHUB_ENV

          RESULT_FILENAME=${{ env.EXP_NAME }}_tp${{ env.TP }}_conc${{ env.CONC }}_${{ runner.name }}
          echo "RESULT_FILENAME=${RESULT_FILENAME}" >> $GITHUB_ENV

      - name: Launch job script - 70B
        run: |
          RUNNER_NAME=${{ runner.name }}
          bash ./runners/launch_${RUNNER_NAME%%_*}*.sh ${{ env.EXP_NAME }}
          if [ ! -f "$RESULT_FILENAME.json" ]; then
            echo "Run failed: Benchmark result $RESULT_FILENAME.json not found." >&2
            exit 1
          fi

  bmk-sweep-test-dsr1:
    runs-on: ${{ inputs.runner }}

    strategy:
      fail-fast: false
      matrix:
        conc: [4, 8, 16, 32, 64]
    name: 'dsr1 ${{ inputs.runner }} (tp8 , conc${{ matrix.conc }})'

    env:
      EXP_NAME: 'dsr1_test'
      IMAGE: ${{ inputs.image-dsr1 }}
      CONC: ${{ matrix.conc }}

    steps:
      - name: Resource cleanup
        run: |
          if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
            echo "Cleaning Docker resource ..."
            docker ps -aq | xargs -r docker rm -f
            docker network prune -f
            while [ -n "$(docker ps -aq)" ]; do
              sleep 5
            done
          fi
          if command -v squeue >/dev/null 2>&1; then
            echo "Cleaning Slurm resource ..."
            scancel -u $USER
            while [ -n "$(squeue -u $USER --noheader --format='%i')" ]; do
              squeue -u $USER
              sleep 5
            done
          fi

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_PAT }}
          fetch-depth: 0

      - name: Set config variables
        run: |
          FRAMEWORK=$([[ ${{ inputs.runner }} == *trt ]] && printf "trt" || printf "")
          echo "FRAMEWORK=${FRAMEWORK}" >> $GITHUB_ENV

          RESULT_FILENAME=${{ env.EXP_NAME }}_tp${{ env.TP }}_conc${{ env.CONC }}_${{ runner.name }}
          echo "RESULT_FILENAME=${RESULT_FILENAME}" >> $GITHUB_ENV

          echo "MODEL=deepseek-ai/DeepSeek-R1-0528" >> $GITHUB_ENV

      - name: Launch job script - DSR1
        run: |
          RUNNER_NAME=${{ runner.name }}
          bash ./runners/launch_${RUNNER_NAME%%_*}*.sh ${{ env.EXP_NAME }}
          if [ ! -f "$RESULT_FILENAME.json" ]; then
            echo "Run failed: Benchmark result $RESULT_FILENAME.json not found." >&2
            exit 1
          fi

  bmk-sweep-test-gptoss:
    runs-on: ${{ inputs.runner }}

    strategy:
      fail-fast: false
      matrix:
        conc: [4, 8, 16, 32, 64]
    name: 'gptoss ${{ inputs.runner }} (tp8 , conc${{ matrix.conc }})'

    env:
      EXP_NAME: 'gptoss_test'
      IMAGE: ${{ inputs.image-gptoss }}
      CONC: ${{ matrix.conc }}

    steps:
      - name: Resource cleanup
        run: |
          if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
            echo "Cleaning Docker resource ..."
            docker ps -aq | xargs -r docker rm -f
            docker network prune -f
            while [ -n "$(docker ps -aq)" ]; do
              sleep 5
            done
          fi
          if command -v squeue >/dev/null 2>&1; then
            echo "Cleaning Slurm resource ..."
            scancel -u $USER
            while [ -n "$(squeue -u $USER --noheader --format='%i')" ]; do
              squeue -u $USER
              sleep 5
            done
          fi

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_PAT }}
          fetch-depth: 0

      - name: Set config variables
        run: |
          FRAMEWORK=$([[ ${{ inputs.runner }} == *trt ]] && printf "trt" || printf "")
          echo "FRAMEWORK=${FRAMEWORK}" >> $GITHUB_ENV

          RESULT_FILENAME=${{ env.EXP_NAME }}_tp${{ env.TP }}_conc${{ env.CONC }}_${{ runner.name }}
          echo "RESULT_FILENAME=${RESULT_FILENAME}" >> $GITHUB_ENV

          echo "MODEL=openai/gpt-oss-120b" >> $GITHUB_ENV

      - name: Launch job script - gptoss
        run: |
          RUNNER_NAME=${{ runner.name }}
          bash ./runners/launch_${RUNNER_NAME%%_*}*.sh ${{ env.EXP_NAME }}
          if [ ! -f "$RESULT_FILENAME.json" ]; then
            echo "Run failed: Benchmark result $RESULT_FILENAME.json not found." >&2
            exit 1
          fi
